name: User Service CI (Optimized)

on:
  push:
    branches: [ main ]
    paths:
      - 'common/**'
      - 'service/user/**'
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
      - '.github/workflows/user-service-ci.yml'
  pull_request:
    types: [ opened, synchronize, reopened ]
    paths:
      - 'common/**'
      - 'service/user/**'
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
      - '.github/workflows/user-service-ci.yml'

env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.14.2'

jobs:
  # ... (other jobs remain the same)

  docker-build-push:
    needs: [linter, test, compile-check]
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    environment: AWS
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.meta.outputs.version }}
      image_tag: ${{ steps.meta.outputs.image_tag_version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      # GitHub Actions Cache for Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Gradle Cache
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Prepare build metadata
        id: meta
        run: |
          REPO_NAME=$(echo "${{ secrets.ECR_REGISTRY }}" | cut -d'/' -f2)
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          
          VERSION=$(date +%Y%m%d%H%M)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          echo "image_tag_latest=${{ secrets.ECR_REGISTRY }}:latest" >> $GITHUB_OUTPUT
          echo "image_tag_sha=${{ secrets.ECR_REGISTRY }}:$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "image_tag_version=${{ secrets.ECR_REGISTRY }}:$VERSION" >> $GITHUB_OUTPUT

      # Optimized Build with multiple cache sources
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: service/user/docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.meta.outputs.image_tag_latest }}
            ${{ steps.meta.outputs.image_tag_sha }}
            ${{ steps.meta.outputs.image_tag_version }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=registry,ref=${{ secrets.ECR_REGISTRY }}:buildcache
            type=inline
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=registry,ref=${{ secrets.ECR_REGISTRY }}:buildcache,mode=max,compression=zstd
            type=inline
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILDKIT_INLINE_CACHE=1

      # Move cache to prevent unbounded growth
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # ... (rest of the workflow)