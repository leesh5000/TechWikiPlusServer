name: User Service CD

on:
  workflow_run:
    workflows: ["User Service CI"]
    branches: [main]
    types:
      - completed
  workflow_dispatch:
    inputs:
      deploy_message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment triggered'

# Set defaults for all jobs - ensure pipeline fails fast
defaults:
  run:
    shell: bash -euo pipefail {0}

jobs:
  prepare-deployment:
    runs-on: ubuntu-latest
    name: Prepare Deployment
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      image_tag: ${{ steps.version.outputs.image_tag }}
      deployment_type: ${{ steps.deployment_type.outputs.type }}
      deployment_info: ${{ steps.deployment_type.outputs.info }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine deployment type
        id: deployment_type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "type=manual" >> $GITHUB_OUTPUT
            echo "info=Manual deployment: ${{ github.event.inputs.deploy_message }}" >> $GITHUB_OUTPUT
          else
            echo "type=automated" >> $GITHUB_OUTPUT
            echo "info=CI Run #${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
          fi

      - name: Generate deployment info
        id: deploy_info
        run: |
          echo "## 🚀 Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Deployment trigger info
          if [ "${{ steps.deployment_type.outputs.type }}" == "manual" ]; then
            echo "**Trigger:** Manual deployment" >> $GITHUB_STEP_SUMMARY
            echo "**Message:** ${{ github.event.inputs.deploy_message }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Trigger:** Automated deployment after CI success" >> $GITHUB_STEP_SUMMARY
            echo "**CI Run:** [#${{ github.event.workflow_run.id }}](${{ github.event.workflow_run.html_url }})" >> $GITHUB_STEP_SUMMARY
          fi

          echo "**Branch:** main" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Download CI artifacts
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: actions/download-artifact@v4
        with:
          name: deployment-info
          path: ./deployment-info
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load deployment version
        id: version
        run: |
          echo "## 📦 Deployment Version Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # For automated deployment, use CI-generated version
          if [ "${{ github.event_name }}" != "workflow_dispatch" ] && [ -f "./deployment-info/deployment-info.env" ]; then
            source ./deployment-info/deployment-info.env
            echo "image_tag=${VERSION}" >> $GITHUB_OUTPUT

            # Display all version-related information
            echo "**Deployment Type:** Automated (CI-triggered)" >> $GITHUB_STEP_SUMMARY
            echo "**Version:** \`${VERSION}\`" >> $GITHUB_STEP_SUMMARY
            echo "**Image Tag:** \`${IMAGE_TAG}\`" >> $GITHUB_STEP_SUMMARY
            echo "**Commit SHA:** \`${COMMIT_SHA}\`" >> $GITHUB_STEP_SUMMARY
            echo "**CI Timestamp:** \`${TIMESTAMP}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Deployment Info Contents:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat ./deployment-info/deployment-info.env >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

            # Also output to workflow logs
            echo "::notice title=Deployment Version::Using CI-generated version: ${VERSION}"
          else
            # For manual deployment, use latest tag
            echo "image_tag=latest" >> $GITHUB_OUTPUT

            echo "**Deployment Type:** Manual (workflow_dispatch)" >> $GITHUB_STEP_SUMMARY
            echo "**Version:** \`latest\`" >> $GITHUB_STEP_SUMMARY
            echo "**Note:** Using latest tag for manual deployment" >> $GITHUB_STEP_SUMMARY

            # Also output to workflow logs
            echo "::notice title=Deployment Version::Using latest tag for manual deployment"
          fi

          echo "" >> $GITHUB_STEP_SUMMARY


  validate-infrastructure:
    runs-on: ubuntu-latest
    name: Validate Infrastructure
    needs: prepare-deployment
    environment: AWS
    outputs:
      ssh_test_passed: ${{ steps.test_ssh.outputs.passed }}
      docker_installed: ${{ steps.check_docker.outputs.installed }}
      docker_version: ${{ steps.check_docker.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup SSH key
        run: |
          echo "## 🔐 Setting up SSH connection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Write SSH private key
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add EC2 host to known hosts to avoid SSH prompt
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || {
            echo "⚠️ Warning: Failed to add host to known_hosts" >> $GITHUB_STEP_SUMMARY
          }

          echo "✅ SSH key configured" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Test SSH connection
        id: test_ssh
        run: |
          echo "## 🔗 Testing SSH connection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Debug information (sanitized)
          echo "### Debug Information:" >> $GITHUB_STEP_SUMMARY
          echo "- SSH key first line: $(echo "${{ secrets.EC2_SSH_KEY }}" | head -n 1)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test network connectivity first
          echo "### Network connectivity test:" >> $GITHUB_STEP_SUMMARY
          if ping -c 1 -W 5 ${{ secrets.EC2_HOST }} > /dev/null 2>&1; then
            echo "✅ Host is reachable via ping" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Host is not reachable via ping (this might be normal if ICMP is blocked)" >> $GITHUB_STEP_SUMMARY
          fi

          # Test SSH port specifically
          if nc -zv -w 10 ${{ secrets.EC2_HOST }} 22 2>&1 | grep -q "succeeded"; then
            echo "✅ Port 22 is open" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Port 22 appears to be closed or filtered" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test SSH connection with verbose output
          echo "### SSH connection test:" >> $GITHUB_STEP_SUMMARY
          if ssh -vv -o ConnectTimeout=30 -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o LogLevel=ERROR \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
            "echo 'SSH connection successful' && uname -a" 2>&1; then
            echo "✅ Successfully connected to EC2 instance" >> $GITHUB_STEP_SUMMARY
          else
            SSH_EXIT_CODE=$?
            echo "❌ Failed to connect to EC2 instance (Exit code: $SSH_EXIT_CODE)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Troubleshooting checklist:" >> $GITHUB_STEP_SUMMARY
            echo "1. **EC2 Instance**:" >> $GITHUB_STEP_SUMMARY
            echo "   - [ ] Instance is in 'running' state" >> $GITHUB_STEP_SUMMARY
            echo "   - [ ] Instance has a public IP address" >> $GITHUB_STEP_SUMMARY
            echo "   - [ ] Instance is in a public subnet" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "2. **Security Group**:" >> $GITHUB_STEP_SUMMARY
            echo "   - [ ] Inbound rule for SSH (port 22) exists" >> $GITHUB_STEP_SUMMARY
            echo "   - [ ] Source is 0.0.0.0/0 or includes GitHub Actions IPs" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "3. **GitHub Secrets**:" >> $GITHUB_STEP_SUMMARY
            echo "   - [ ] EC2_HOST contains valid IP/hostname" >> $GITHUB_STEP_SUMMARY
            echo "   - [ ] EC2_USERNAME is correct (ubuntu/ec2-user/etc)" >> $GITHUB_STEP_SUMMARY
            echo "   - [ ] EC2_SSH_KEY contains full PEM key with headers" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "4. **Network**:" >> $GITHUB_STEP_SUMMARY
            echo "   - [ ] No Network ACL blocking port 22" >> $GITHUB_STEP_SUMMARY
            echo "   - [ ] Route table has internet gateway route" >> $GITHUB_STEP_SUMMARY
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_STEP_SUMMARY



      - name: Check Docker installation on EC2
        id: check_docker
        run: |
          echo "## 🐳 Checking Docker installation on EC2" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          DOCKER_CHECK=$(ssh -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
            "command -v docker >/dev/null 2>&1 && echo 'installed' || echo 'not-installed'")

          if [ "$DOCKER_CHECK" = "installed" ]; then
            DOCKER_VERSION=$(ssh -o StrictHostKeyChecking=no \
              ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
              "docker --version")
            echo "✅ Docker is installed: $DOCKER_VERSION" >> $GITHUB_STEP_SUMMARY
            echo "installed=true" >> $GITHUB_OUTPUT
            echo "version=$DOCKER_VERSION" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Docker is not installed on EC2" >> $GITHUB_STEP_SUMMARY
            echo "The deployment script will check and provide installation instructions" >> $GITHUB_STEP_SUMMARY
            echo "installed=false" >> $GITHUB_OUTPUT
            echo "version=not-installed" >> $GITHUB_OUTPUT
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

  deploy-application:
    runs-on: ubuntu-latest
    name: Deploy Application
    needs: [prepare-deployment, validate-infrastructure]
    # Only run if previous jobs succeeded
    if: ${{ needs.prepare-deployment.result == 'success' && needs.validate-infrastructure.result == 'success' }}
    environment: AWS
    outputs:
      deploy_exit_code: ${{ steps.execute_deploy.outputs.exit_code }}
      deploy_success: ${{ steps.execute_deploy.outputs.success }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup SSH key
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts || {
            echo "❌ Failed to add host to known_hosts"
            exit 1
          }

      - name: Create .env.tag file
        run: |
          echo "## 📝 Creating .env.tag file" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create .env.tag file with IMAGE_TAG
          echo "IMAGE_TAG=${{ needs.prepare-deployment.outputs.image_tag }}" > .env.tag

          echo "**Created .env.tag with content:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat .env.tag >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Also output to workflow logs
          echo "::notice title=.env.tag Created::IMAGE_TAG=${{ needs.prepare-deployment.outputs.image_tag }}"

      - name: Create .env.github-actions file
        run: |
          echo "## 🌐 Creating .env.github-actions file" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create .env.github-actions file with AWS configuration and GitHub Actions metadata
          cat > .env.github-actions << EOF
          # AWS Configuration for deployment
          AWS_REGION=${{ secrets.AWS_REGION }}
          ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}
          
          # GitHub Actions metadata
          COMMIT_SHA=${{ github.sha }}
          GITHUB_RUN_NUMBER=${{ github.run_number }}
          GITHUB_ACTOR=${{ github.actor }}
          EOF

          echo "**Created .env.github-actions with content:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          # Show content but mask sensitive values
          echo "# AWS Configuration for deployment" >> $GITHUB_STEP_SUMMARY
          echo "AWS_REGION=***" >> $GITHUB_STEP_SUMMARY
          echo "ECR_REGISTRY=***" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# GitHub Actions metadata" >> $GITHUB_STEP_SUMMARY
          echo "COMMIT_SHA=${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "GITHUB_RUN_NUMBER=${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "GITHUB_ACTOR=${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Also output to workflow logs
          echo "::notice title=.env.github-actions Created::AWS configuration and GitHub Actions metadata file created successfully"

      - name: Create deployment directory on EC2
        id: create_dir
        run: |
          set -euo pipefail
          echo "## 📁 Preparing deployment directory" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if ! ssh -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
            "mkdir -p ${{ secrets.EC2_DEPLOY_PATH }}"; then
              echo "❌ Failed to create deployment directory" >> $GITHUB_STEP_SUMMARY
              exit 1
          fi

          echo "✅ Deployment directory ready: ${{ secrets.EC2_DEPLOY_PATH }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Transfer deployment files
        id: transfer_files
        run: |
          set -euo pipefail
          echo "## 📤 Transferring deployment files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Function to transfer file with proper error handling
          transfer_file() {
            local src="$1"
            local filename=$(basename "$src")
            echo "Transferring $filename..." >> $GITHUB_STEP_SUMMARY

            if ! scp -o StrictHostKeyChecking=no \
              "$src" \
              "${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_DEPLOY_PATH }}/"; then
                echo "❌ Failed to transfer $filename" >> $GITHUB_STEP_SUMMARY
                exit 1
            fi
            echo "✅ $filename transferred" >> $GITHUB_STEP_SUMMARY
          }

          # Transfer all required files
          transfer_file "service/user/deploy.sh"
          transfer_file "service/user/docker/docker-compose.base.yml"
          transfer_file "service/user/docker/docker-compose.user-service.yml"
          transfer_file ".env.tag"
          transfer_file ".env.github-actions"

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Files transferred successfully:" >> $GITHUB_STEP_SUMMARY
          echo "- deploy.sh" >> $GITHUB_STEP_SUMMARY
          echo "- docker-compose.base.yml" >> $GITHUB_STEP_SUMMARY
          echo "- docker-compose.user-service.yml" >> $GITHUB_STEP_SUMMARY
          echo "- .env.tag" >> $GITHUB_STEP_SUMMARY
          echo "- .env.github-actions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Make deploy.sh executable
        run: |
          set -euo pipefail
          if ! ssh -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
            "cd ${{ secrets.EC2_DEPLOY_PATH }} && chmod +x deploy.sh"; then
              echo "❌ Failed to make deploy.sh executable" >> $GITHUB_STEP_SUMMARY
              exit 1
          fi

          echo "✅ deploy.sh is now executable" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Execute deployment script
        id: execute_deploy
        run: |
          set -euo pipefail
          echo "## 🚀 Executing deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Running deploy.sh on EC2..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Display deployment configuration
          echo "### Deployment Configuration:" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Registry:** \`${{ secrets.ECR_REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** \`${{ needs.prepare-deployment.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Full Image:** \`${{ secrets.ECR_REGISTRY }}:${{ needs.prepare-deployment.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create a deployment log file
          DEPLOY_LOG="deploy_$(date +%Y%m%d_%H%M%S).log"

          # Execute deployment script with proper error handling
          set +e  # Temporarily disable errexit to capture exit code
          ssh -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
            "cd ${{ secrets.EC2_DEPLOY_PATH }} && \
             echo \"Deployment started (IMAGE_TAG and AWS config will be loaded from .env files)\" && \
             ./deploy.sh 2>&1 | tee $DEPLOY_LOG" | tee deployment_output.log

          DEPLOY_EXIT_CODE=$?
          set -e  # Re-enable errexit

          # Check deployment result
          if [ $DEPLOY_EXIT_CODE -eq 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ✅ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "exit_code=0" >> $GITHUB_OUTPUT
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ❌ Deployment failed with exit code: $DEPLOY_EXIT_CODE" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the deployment logs above for details." >> $GITHUB_STEP_SUMMARY
            echo "exit_code=$DEPLOY_EXIT_CODE" >> $GITHUB_OUTPUT
            echo "success=false" >> $GITHUB_OUTPUT
            exit $DEPLOY_EXIT_CODE
          fi

      - name: Upload deployment logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs
          path: |
            deployment_output.log

  post-deployment:
    runs-on: ubuntu-latest
    name: Post Deployment
    needs: [prepare-deployment, validate-infrastructure, deploy-application]
    # Always run this job for summary, but only if deploy-application ran or was skipped
    if: always() && (needs.deploy-application.result == 'success' || needs.deploy-application.result == 'failure' || needs.deploy-application.result == 'skipped')
    environment: AWS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup SSH key
        if: needs.deploy-application.outputs.deploy_success == 'true'
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts || true

      - name: Verify deployment
        if: needs.deploy-application.outputs.deploy_success == 'true'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Post-deployment verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check running containers
          echo "### Running containers:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ssh -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
            "cd ${{ secrets.EC2_DEPLOY_PATH }} && docker-compose ps" >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Download deployment logs
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: deployment-logs
          path: ./logs

      - name: Final summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Deployment type and info
          echo "### Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Type:** ${{ needs.prepare-deployment.outputs.deployment_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** ${{ needs.prepare-deployment.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Info:** ${{ needs.prepare-deployment.outputs.deployment_info }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Infrastructure validation results
          echo "### Infrastructure Validation:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.validate-infrastructure.outputs.ssh_test_passed }}" == "true" ]; then
            echo "- ✅ SSH Connection: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ SSH Connection: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.validate-infrastructure.outputs.docker_installed }}" == "true" ]; then
            echo "- ✅ Docker: ${{ needs.validate-infrastructure.outputs.docker_version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ Docker: Not installed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Final deployment status
          if [ "${{ needs.deploy-application.outputs.deploy_success }}" == "true" ]; then
            echo "### ✅ Deployment Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The User Service has been successfully deployed to production!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Deployment Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The deployment encountered issues. Please check the logs and try again." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment artifacts:** Check the uploaded deployment logs for detailed information." >> $GITHUB_STEP_SUMMARY
