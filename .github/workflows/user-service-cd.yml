name: User Service CD

on:
  push:
    branches: [ main ]
    paths:
      - 'common/**'
      - 'service/user/**'
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
      - 'gradle.properties'
      - 'gradlew'
      - 'gradlew.bat'
      - 'gradle/wrapper/**'
      - 'gradle/libs.versions.toml'
      - '.github/workflows/user-service-cd.yml'
  workflow_dispatch:
    inputs:
      deploy_message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment triggered'

# Set defaults for all jobs - ensure pipeline fails fast
defaults:
  run:
    shell: bash -euo pipefail {0}

env:
  JAVA_VERSION: '21'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    environment: AWS
    outputs:
      image_tag: ${{ steps.meta.outputs.short_sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          cache-cleanup: on-success

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build application
        run: |
          echo "## 🏗️ Building Application" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          ./gradlew :service:user:bootJar --no-daemon --stacktrace
          echo "✅ Application built successfully" >> $GITHUB_STEP_SUMMARY

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          echo "## 🐳 Docker Build and Push to ECR" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Login to ECR
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

          echo "✅ **ECR Login:** Successful" >> $GITHUB_STEP_SUMMARY

      - name: Prepare build metadata
        id: meta
        run: |
          # Generate short SHA for image tag
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

          # Set image tags
          echo "image_tag_short=${{ secrets.ECR_REGISTRY }}:$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "image_tag_latest=${{ secrets.ECR_REGISTRY }}:latest" >> $GITHUB_OUTPUT

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Build Metadata" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Short SHA:** $SHORT_SHA" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** ${{ secrets.ECR_REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Build and push Docker image
        id: docker-build
        run: |
          echo "### 🔨 Building Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Enable BuildKit
          export DOCKER_BUILDKIT=1
          export BUILDKIT_PROGRESS=plain

          # Build and push the image
          docker buildx build \
            --platform linux/amd64 \
            --file service/user/docker/Dockerfile \
            --tag ${{ steps.meta.outputs.image_tag_short }} \
            --tag ${{ steps.meta.outputs.image_tag_latest }} \
            --cache-from type=registry,ref=${{ secrets.ECR_REGISTRY }}:buildcache \
            --cache-to type=registry,ref=${{ secrets.ECR_REGISTRY }}:buildcache,mode=max \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --progress=plain \
            --push \
            .

          echo "✅ **Docker Build:** Successful" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Docker Push:** Images pushed to ECR" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Image Tags" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ steps.meta.outputs.short_sha }}\` (commit SHA)" >> $GITHUB_STEP_SUMMARY
          echo "- \`latest\` (latest tag)" >> $GITHUB_STEP_SUMMARY

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to EC2
    needs: build-and-push
    environment: AWS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup SSH key
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts || {
            echo "❌ Failed to add host to known_hosts"
            exit 1
          }

      - name: Create .env.tag file
        run: |
          echo "## 📝 Creating deployment configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create .env.tag file with the commit SHA as IMAGE_TAG
          echo "IMAGE_TAG=${{ needs.build-and-push.outputs.image_tag }}" > .env.tag

          echo "**Created .env.tag:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat .env.tag >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Create .env.github-actions file
        run: |
          # Create .env.github-actions file with AWS configuration
          cat > .env.github-actions << EOF
          # AWS Configuration for deployment
          AWS_REGION=${{ secrets.AWS_REGION }}
          ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}

          # GitHub Actions metadata
          COMMIT_SHA=${{ github.sha }}
          GITHUB_RUN_NUMBER=${{ github.run_number }}
          GITHUB_ACTOR=${{ github.actor }}
          DEPLOYMENT_TYPE=${{ github.event_name }}
          EOF

          echo "✅ Created .env.github-actions with AWS configuration" >> $GITHUB_STEP_SUMMARY

      - name: Create deployment directory on EC2
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
            "mkdir -p ${{ secrets.EC2_DEPLOY_PATH }}"

      - name: Transfer deployment files
        run: |
          set -euo pipefail
          echo "## 📤 Transferring deployment files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Transfer all required files
          scp -o StrictHostKeyChecking=no \
            service/user/deploy.sh \
            service/user/docker/docker-compose.base.yml \
            service/user/docker/docker-compose.user-service.yml \
            .env.tag \
            .env.github-actions \
            "${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_DEPLOY_PATH }}/"

          echo "✅ All deployment files transferred successfully" >> $GITHUB_STEP_SUMMARY

      - name: Execute deployment
        run: |
          set -euo pipefail
          echo "## 🚀 Executing deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Make deploy.sh executable and run it
          ssh -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
            "cd ${{ secrets.EC2_DEPLOY_PATH }} && \
             chmod +x deploy.sh && \
             ./deploy.sh 2>&1" | tee deployment_output.log

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY

      - name: Verify deployment
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Post-deployment verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check running containers
          echo "### Running containers:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ssh -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
            "cd ${{ secrets.EC2_DEPLOY_PATH }} && docker-compose --env-file .env.tag --env-file .env.base --env-file .env.user-service -f docker-compose.base.yml -f docker-compose.user-service.yml ps" >> $GITHUB_STEP_SUMMARY || echo "Failed to check container status" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload deployment logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs
          path: |
            deployment_output.log

  deployment-summary:
    runs-on: ubuntu-latest
    name: Deployment Summary
    needs: [build-and-push, deploy]
    if: always()

    steps:
      - name: Final summary
        run: |
          echo "## 📊 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Deployment trigger info
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "**Trigger:** Manual deployment" >> $GITHUB_STEP_SUMMARY
            echo "**Message:** ${{ github.event.inputs.deploy_message }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Trigger:** Push to main branch (PR merge)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "**Branch:** main" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed Image Tag:** ${{ needs.build-and-push.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Build and deployment status
          if [ "${{ needs.build-and-push.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "### ✅ Deployment Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The User Service has been successfully deployed with commit SHA: **${{ needs.build-and-push.outputs.image_tag }}**" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Deployment Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.build-and-push.result }}" != "success" ]; then
              echo "- Build and Push: Failed" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ needs.deploy.result }}" != "success" ]; then
              echo "- Deployment: Failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi