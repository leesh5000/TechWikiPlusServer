name: User Service CI

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    paths:
      - 'common/**'
      - 'service/user/**'
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
      - 'gradle.properties'
      - 'gradlew'
      - 'gradlew.bat'
      - 'gradle/wrapper/**'
      - 'gradle/libs.versions.toml'
      - '.github/workflows/user-service-ci.yml'

env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.14.2'

jobs:
  linter:
    runs-on: ubuntu-latest
    name: Code Style Check (ktlint)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}
          cache-cleanup: on-success

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run ktlint
        id: ktlint
        run: |
          echo "## üé® Code Style Check (ktlint)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run ktlint and capture output
          ./gradlew ktlintCheck --no-daemon --stacktrace > ktlint-output.log 2>&1 || KTLINT_EXIT_CODE=$?

          if [ -z "$KTLINT_EXIT_CODE" ]; then
            echo "‚úÖ **Status:** Passed" >> $GITHUB_STEP_SUMMARY
            echo "All code follows the style guidelines!" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status:** Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Style Violations Found:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY

            # Extract and display ktlint errors
            grep -E "\\[(ERROR|WARNING)\\]" ktlint-output.log >> $GITHUB_STEP_SUMMARY || true

            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Fix command:** \`./gradlew ktlintFormat\`" >> $GITHUB_STEP_SUMMARY

            # Fail the step
            exit $KTLINT_EXIT_CODE
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Upload ktlint reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ktlint-reports
          path: |
            **/build/reports/ktlint/**/*.xml
            **/build/reports/ktlint/**/*.txt
            ktlint-output.log

  test:
    runs-on: ubuntu-latest
    name: Run Tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}
          cache-cleanup: on-success

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        id: test
        run: |
          echo "## üß™ Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run tests for both common and user service modules
          ./gradlew :common:snowflake:test :service:user:test --no-daemon --stacktrace > test-output.log 2>&1 || TEST_EXIT_CODE=$?

          if [ -z "$TEST_EXIT_CODE" ]; then
            echo "‚úÖ **Status:** All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status:** Tests failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Failed Tests:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY

            # Extract test failures
            grep -A 5 -B 5 "FAILED" test-output.log | grep -E "(FAILED|expected|but was|at )" >> $GITHUB_STEP_SUMMARY || true

            echo '```' >> $GITHUB_STEP_SUMMARY

            # Fail the step
            exit $TEST_EXIT_CODE
          fi

      - name: Generate test report summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Summary by Module:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Common module test results
          if [ -f "common/snowflake/build/test-results/test/TEST-*.xml" ]; then
            echo "**Common Module (snowflake):**" >> $GITHUB_STEP_SUMMARY
            TEST_COUNT=$(find common/snowflake/build/test-results/test -name "TEST-*.xml" -exec grep -h "tests=" {} \; | awk -F'"' '{sum+=$2} END {print sum}' || echo "0")
            FAILURE_COUNT=$(find common/snowflake/build/test-results/test -name "TEST-*.xml" -exec grep -h "failures=" {} \; | awk -F'"' '{sum+=$2} END {print sum}' || echo "0")
            echo "- Total tests: $TEST_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- Failures: $FAILURE_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # User service test results
          if [ -f "service/user/build/test-results/test/TEST-*.xml" ]; then
            echo "**User Service:**" >> $GITHUB_STEP_SUMMARY
            TEST_COUNT=$(find service/user/build/test-results/test -name "TEST-*.xml" -exec grep -h "tests=" {} \; | awk -F'"' '{sum+=$2} END {print sum}' || echo "0")
            FAILURE_COUNT=$(find service/user/build/test-results/test -name "TEST-*.xml" -exec grep -h "failures=" {} \; | awk -F'"' '{sum+=$2} END {print sum}' || echo "0")
            echo "- Total tests: $TEST_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- Failures: $FAILURE_COUNT" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            **/build/test-results/test/TEST-*.xml
            **/build/reports/tests/test/
            test-output.log

  compile-check:
    runs-on: ubuntu-latest
    name: Compile Check

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}
          cache-cleanup: on-success

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Compile check
        id: compile
        run: |
          echo "## üîç Compile Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Compile the application (both common and user service)
          ./gradlew :common:snowflake:compileKotlin :service:user:compileKotlin --no-daemon --stacktrace > compile-output.log 2>&1 || COMPILE_EXIT_CODE=$?

          if [ -z "$COMPILE_EXIT_CODE" ]; then
            echo "‚úÖ **Status:** Compilation successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All Kotlin code compiles without errors." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status:** Compilation failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Compilation Errors:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY

            # Extract compilation errors
            grep -E "(error:|ERROR|FAILURE|e: )" compile-output.log | head -30 >> $GITHUB_STEP_SUMMARY || true

            echo '```' >> $GITHUB_STEP_SUMMARY

            # Fail the step
            exit $COMPILE_EXIT_CODE
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Upload compile logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compile-logs
          path: |
            compile-output.log
            **/build/tmp/

  ci-summary:
    needs: [linter, test, compile-check]
    if: always()
    runs-on: ubuntu-latest
    name: CI Summary
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const linterResult = '${{ needs.linter.result }}';
            const testResult = '${{ needs.test.result }}';
            const compileResult = '${{ needs.compile-check.result }}';

            const statusEmoji = (result) => result === 'success' ? '‚úÖ' : '‚ùå';

            const allSuccess = linterResult === 'success' && testResult === 'success' && compileResult === 'success';
            const overallStatus = allSuccess ? '‚úÖ All CI checks passed!' : '‚ùå Some CI checks failed';

            const comment = `## CI Results for User Service

            ${overallStatus}

            | Check | Status |
            |-------|--------|
            | Code Style (ktlint) | ${statusEmoji(linterResult)} ${linterResult} |
            | Tests | ${statusEmoji(testResult)} ${testResult} |
            | Compile Check | ${statusEmoji(compileResult)} ${compileResult} |

            **Commit:** \`${context.sha.substring(0, 7)}\`
            **Workflow Run:** [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });