name: User Service CI

# Updated 2025-07-30: Upgraded gradle/actions/setup-gradle from v3 to v4
# to resolve GitHub Actions cache service migration issues.
# Removed deprecated cache-encryption-key and gradle-home-cache-strict-match options.
# Added enhanced debugging for build failures.

on:
  push:
    branches: [ main ]
    paths:
      - 'common/**'
      - 'service/user/**'
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
      - '.github/workflows/user-service-ci.yml'
  pull_request:
    types: [ opened, synchronize, reopened ]
    paths:
      - 'common/**'
      - 'service/user/**'
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
      - '.github/workflows/user-service-ci.yml'

env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.14.2'  # Must match gradle-wrapper.properties version
  # Using gradle/actions/setup-gradle@v4 for GitHub Actions cache service compatibility (2025)

jobs:
  ci:
    runs-on: ubuntu-latest
    name: CI Pipeline
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}
          gradle-home-cache-cleanup: true
        continue-on-error: true  # Continue if cache fails
      
      - name: Fallback Gradle Cache Setup
        if: failure()
        run: |
          echo "Primary Gradle cache setup failed, using fallback cache strategy"
          echo "This is expected during GitHub Actions cache service migration (2025)"
          mkdir -p ~/.gradle/caches
          mkdir -p ~/.gradle/wrapper
          # Clear any potentially corrupted cache files
          find ~/.gradle/caches -name "*.lock" -type f -delete 2>/dev/null || true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Verify Gradle Setup
        run: |
          echo "Gradle Version: $(./gradlew --version | grep "Gradle" | head -1)"
          echo "Java Version: $(java --version | head -1)"
          echo "Gradle Wrapper Properties:"
          cat gradle/wrapper/gradle-wrapper.properties | grep "distributionUrl"

      - name: Initialize Job Summary
        run: |
          echo "# User Service CI Results" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Run:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  linter:
    needs: ci
    runs-on: ubuntu-latest
    name: Code Style Check (ktlint)
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}
          gradle-home-cache-cleanup: true
        continue-on-error: true  # Continue if cache fails
      
      - name: Fallback Gradle Cache Setup
        if: failure()
        run: |
          echo "Primary Gradle cache setup failed, using fallback cache strategy"
          echo "This is expected during GitHub Actions cache service migration (2025)"
          mkdir -p ~/.gradle/caches
          mkdir -p ~/.gradle/wrapper
          # Clear any potentially corrupted cache files
          find ~/.gradle/caches -name "*.lock" -type f -delete 2>/dev/null || true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run ktlint
        id: ktlint
        run: |
          echo "## 🎨 Code Style Check (ktlint)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run ktlint and capture output
          ./gradlew ktlintCheck --no-daemon --stacktrace --info > ktlint-output.log 2>&1 || KTLINT_EXIT_CODE=$?
          
          if [ -z "$KTLINT_EXIT_CODE" ]; then
            echo "✅ **Status:** Passed" >> $GITHUB_STEP_SUMMARY
            echo "All code follows the style guidelines!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Style Violations Found:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Extract and display ktlint errors
            grep -E "\\[(ERROR|WARNING)\\]" ktlint-output.log >> $GITHUB_STEP_SUMMARY || true
            
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Fix command:** \`./gradlew ktlintFormat\`" >> $GITHUB_STEP_SUMMARY
            
            # Fail the step
            exit $KTLINT_EXIT_CODE
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Upload ktlint reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ktlint-reports
          path: |
            **/build/reports/ktlint/**/*.xml
            **/build/reports/ktlint/**/*.txt
            ktlint-output.log

  test:
    needs: ci
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}
          gradle-home-cache-cleanup: true
        continue-on-error: true  # Continue if cache fails
      
      - name: Fallback Gradle Cache Setup
        if: failure()
        run: |
          echo "Primary Gradle cache setup failed, using fallback cache strategy"
          echo "This is expected during GitHub Actions cache service migration (2025)"
          mkdir -p ~/.gradle/caches
          mkdir -p ~/.gradle/wrapper
          # Clear any potentially corrupted cache files
          find ~/.gradle/caches -name "*.lock" -type f -delete 2>/dev/null || true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        id: test
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run tests for both common and user service modules
          ./gradlew :common:snowflake:test :service:user:test --no-daemon --stacktrace > test-output.log 2>&1 || TEST_EXIT_CODE=$?
          
          if [ -z "$TEST_EXIT_CODE" ]; then
            echo "✅ **Status:** All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Tests failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Failed Tests:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Extract test failures
            grep -A 5 -B 5 "FAILED" test-output.log | grep -E "(FAILED|expected|but was|at )" >> $GITHUB_STEP_SUMMARY || true
            
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Fail the step
            exit $TEST_EXIT_CODE
          fi

      - name: Generate test report summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Summary by Module:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Common module test results
          if [ -f "common/snowflake/build/test-results/test/TEST-*.xml" ]; then
            echo "**Common Module (snowflake):**" >> $GITHUB_STEP_SUMMARY
            TEST_COUNT=$(find common/snowflake/build/test-results/test -name "TEST-*.xml" -exec grep -h "tests=" {} \; | awk -F'"' '{sum+=$2} END {print sum}' || echo "0")
            FAILURE_COUNT=$(find common/snowflake/build/test-results/test -name "TEST-*.xml" -exec grep -h "failures=" {} \; | awk -F'"' '{sum+=$2} END {print sum}' || echo "0")
            echo "- Total tests: $TEST_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- Failures: $FAILURE_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # User service test results
          if [ -f "service/user/build/test-results/test/TEST-*.xml" ]; then
            echo "**User Service:**" >> $GITHUB_STEP_SUMMARY
            TEST_COUNT=$(find service/user/build/test-results/test -name "TEST-*.xml" -exec grep -h "tests=" {} \; | awk -F'"' '{sum+=$2} END {print sum}' || echo "0")
            FAILURE_COUNT=$(find service/user/build/test-results/test -name "TEST-*.xml" -exec grep -h "failures=" {} \; | awk -F'"' '{sum+=$2} END {print sum}' || echo "0")
            echo "- Total tests: $TEST_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- Failures: $FAILURE_COUNT" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            **/build/test-results/test/TEST-*.xml
            **/build/reports/tests/test/
            test-output.log

  compile-check:
    needs: [linter, test]
    runs-on: ubuntu-latest
    name: Compile Check
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}
          gradle-home-cache-cleanup: true
        continue-on-error: true  # Continue if cache fails
      
      - name: Fallback Gradle Cache Setup
        if: failure()
        run: |
          echo "Primary Gradle cache setup failed, using fallback cache strategy"
          echo "This is expected during GitHub Actions cache service migration (2025)"
          mkdir -p ~/.gradle/caches
          mkdir -p ~/.gradle/wrapper
          # Clear any potentially corrupted cache files
          find ~/.gradle/caches -name "*.lock" -type f -delete 2>/dev/null || true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Compile check
        id: compile
        run: |
          echo "## 🔍 Compile Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Compile the application (both common and user service)
          ./gradlew :common:snowflake:compileKotlin :service:user:compileKotlin --no-daemon --stacktrace --info > compile-output.log 2>&1 || COMPILE_EXIT_CODE=$?
          
          if [ -z "$COMPILE_EXIT_CODE" ]; then
            echo "✅ **Status:** Compilation successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All Kotlin code compiles without errors." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Compilation failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Compilation Errors:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Extract compilation errors
            grep -E "(error:|ERROR|FAILURE|e: )" compile-output.log | head -30 >> $GITHUB_STEP_SUMMARY || true
            
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Fail the step
            exit $COMPILE_EXIT_CODE
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Upload compile logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compile-logs
          path: |
            compile-output.log
            **/build/tmp/

  docker-build-push:
    needs: [linter, test, compile-check]
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    environment: AWS
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.meta.outputs.version }}
      image_tag: ${{ steps.meta.outputs.image_tag_version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-flags: --debug
          config-inline: |
            [worker.oci]
              max-parallelism = 4
            [registry."${{ secrets.ECR_REGISTRY }}"]
              mirrors = ["${{ secrets.ECR_REGISTRY }}"]
              http = false
              insecure = false

      - name: Debug - Check if secrets are available
        run: |
          echo "Checking if AWS secrets are configured..."
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "ERROR: AWS_ACCESS_KEY_ID secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "ERROR: AWS_SECRET_ACCESS_KEY secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.ECR_REGISTRY }}" ]; then
            echo "ERROR: ECR_REGISTRY secret is not set"
            exit 1
          fi
          echo "All required secrets are configured"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Verify AWS credentials
        run: |
          echo "Verifying AWS credentials configuration..."
          aws sts get-caller-identity > aws-identity.log 2>&1 || AWS_VERIFY_EXIT_CODE=$?
          
          if [ -z "$AWS_VERIFY_EXIT_CODE" ]; then
            echo "✅ AWS credentials configured successfully"
            echo "Account info:"
            cat aws-identity.log
          else
            echo "❌ Failed to verify AWS credentials"
            echo "Error details:"
            cat aws-identity.log
            exit $AWS_VERIFY_EXIT_CODE
          fi

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          echo "## 🐳 Docker Build and Push to ECR" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Login to ECR
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }} > ecr-login.log 2>&1 || ECR_LOGIN_EXIT_CODE=$?
          
          if [ -z "$ECR_LOGIN_EXIT_CODE" ]; then
            echo "✅ **ECR Login:** Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **ECR Login:** Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Login Error:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat ecr-login.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit $ECR_LOGIN_EXIT_CODE
          fi

      - name: Prepare build metadata
        id: meta
        run: |
          # Extract repository name from ECR registry URL
          REPO_NAME=$(echo "${{ secrets.ECR_REGISTRY }}" | cut -d'/' -f2)
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          
          # Generate tags
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          
          # Generate version with date/time (YYYYMMDDHHMM format)
          VERSION=$(date +%Y%m%d%H%M)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Set image tags
          echo "image_tag_latest=${{ secrets.ECR_REGISTRY }}:latest" >> $GITHUB_OUTPUT
          echo "image_tag_sha=${{ secrets.ECR_REGISTRY }}:$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "image_tag_version=${{ secrets.ECR_REGISTRY }}:$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: docker-build
        with:
          context: .
          file: service/user/docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.meta.outputs.image_tag_latest }}
            ${{ steps.meta.outputs.image_tag_sha }}
            ${{ steps.meta.outputs.image_tag_version }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=registry,ref=${{ secrets.ECR_REGISTRY }}:buildcache
            type=inline
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=registry,ref=${{ secrets.ECR_REGISTRY }}:buildcache,mode=max,compression=zstd
            type=inline
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILDKIT_INLINE_CACHE=1

      - name: Build summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔨 Docker Build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.docker-build.outcome }}" == "success" ]; then
            echo "✅ **Build Status:** Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Build Cache:** Enabled (BuildKit)" >> $GITHUB_STEP_SUMMARY
            echo "**Cache Strategy:** Multi-level (local + registry + inline)" >> $GITHUB_STEP_SUMMARY
            echo "**Platform:** linux/amd64" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Verify pushed images
        id: docker-verify
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📤 Push to ECR" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Record build time
          BUILD_TIME="${{ steps.docker-build.outputs.metadata }}"
          if [ -n "$BUILD_TIME" ]; then
            echo "**Build Metadata:** Available" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "✅ **All tags pushed successfully during build**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** \`${{ secrets.ECR_REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Tag:** \`latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA Tag:** \`${{ steps.meta.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Tag:** \`${{ steps.meta.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Full SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Upload Docker build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-logs
          path: |
            ecr-login.log

      - name: Save version info
        if: success()
        run: |
          echo "${{ steps.meta.outputs.version }}" > version.txt
          echo "VERSION=${{ steps.meta.outputs.version }}" > deployment-info.env
          echo "IMAGE_TAG=${{ steps.meta.outputs.image_tag_version }}" >> deployment-info.env
          echo "COMMIT_SHA=${{ github.sha }}" >> deployment-info.env
          echo "TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment-info.env

      - name: Upload deployment info
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: |
            version.txt
            deployment-info.env
          retention-days: 7

  summary:
    needs: [linter, test, compile-check, docker-build-push]
    if: always()
    runs-on: ubuntu-latest
    name: CI Summary
    
    steps:
      - name: Generate final summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Overall CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job statuses
          ALL_SUCCESS=true
          if [ "${{ needs.linter.result }}" == "success" ] && 
             [ "${{ needs.test.result }}" == "success" ] && 
             [ "${{ needs.compile-check.result }}" == "success" ]; then
            # Check Docker job only if it was supposed to run
            if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
              if [ "${{ needs.docker-build-push.result }}" == "success" ] || [ "${{ needs.docker-build-push.result }}" == "skipped" ]; then
                echo "### ✅ All CI checks passed successfully!" >> $GITHUB_STEP_SUMMARY
              else
                ALL_SUCCESS=false
              fi
            else
              echo "### ✅ All CI checks passed successfully!" >> $GITHUB_STEP_SUMMARY
            fi
          else
            ALL_SUCCESS=false
          fi
          
          if [ "$ALL_SUCCESS" == "false" ]; then
            echo "### ❌ Some CI checks failed:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            [ "${{ needs.linter.result }}" != "success" ] && echo "- ❌ Code Style Check: ${{ needs.linter.result }}" >> $GITHUB_STEP_SUMMARY
            [ "${{ needs.test.result }}" != "success" ] && echo "- ❌ Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
            [ "${{ needs.compile-check.result }}" != "success" ] && echo "- ❌ Compile Check: ${{ needs.compile-check.result }}" >> $GITHUB_STEP_SUMMARY
            
            # Show Docker status only if it was supposed to run
            if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
              [ "${{ needs.docker-build-push.result }}" != "success" ] && [ "${{ needs.docker-build-push.result }}" != "skipped" ] && echo "- ❌ Docker Build & Push: ${{ needs.docker-build-push.result }}" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Duration:** ~${{ github.run_number }} minutes" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const linterResult = '${{ needs.linter.result }}';
            const testResult = '${{ needs.test.result }}';
            const compileResult = '${{ needs.compile-check.result }}';
            const dockerResult = '${{ needs.docker-build-push.result }}';
            
            const statusEmoji = (result) => result === 'success' ? '✅' : '❌';
            
            let tableRows = `| Code Style (ktlint) | ${statusEmoji(linterResult)} ${linterResult} |
            | Tests | ${statusEmoji(testResult)} ${testResult} |
            | Compile Check | ${statusEmoji(compileResult)} ${compileResult} |`;
            
            // Note: Docker build/push only runs on main branch push, not on PRs
            const dockerNote = `
            
            > **Note:** Docker image build and push to ECR will run automatically when this PR is merged to the main branch.`;
            
            const comment = `## CI Results for User Service
            
            | Check | Status |
            |-------|--------|
            ${tableRows}
            ${dockerNote}
            
            **Commit:** \`${context.sha.substring(0, 7)}\`
            **Workflow Run:** [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });