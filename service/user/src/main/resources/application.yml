server:
  port: 9001

spring:
  application:
    name: user

  # ANSI 색상 출력 활성화
  output:
    ansi:
      enabled: always

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://mysql:3306/${MYSQL_DATABASE}?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&rewriteBatchedStatements=true&cachePrepStmts=true&useServerPrepStmts=true
    username: ${MYSQL_USER}
    password: ${MYSQL_PASSWORD}
    hikari:
      maximum-pool-size: 30 # 최대 커넥션 풀 크기
      minimum-idle: 10 # 최소 유휴 커넥션 수
      connection-timeout: 30000 # 커넥션 타임아웃 (30초)
      idle-timeout: 600000 # 유휴 커넥션 타임아웃 (10분)
      max-lifetime: 1800000 # 커넥션 최대 생명주기 (30분)
  flyway:
    enabled: true
    locations: classpath:db/migration
    clean-disabled: true
  jpa:
    open-in-view: false
    show-sql: false  # 성능 최적화를 위해 비활성화
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        # 배치 처리 설정
        jdbc:
          batch_size: 5000
          batch_versioned_data: true
          fetch_size: 1000
        # SQL 순서 최적화
        order_inserts: true
        order_updates: true
        # 통계 비활성화 (성능 향상)
        generate_statistics: false
        # 캐시 비활성화 (배치 처리에서는 불필요)
        cache:
          use_second_level_cache: false
          use_query_cache: false
        # 메타데이터 최적화
        # JDBC 메타데이터 접근 허용 (자동 dialect 감지를 위해 필요)
        boot:
          allow_jdbc_metadata_access: true

  data:
    redis:
      host: redis
      port: 6379
      password: ${REDIS_PASSWORD}

  # Mail configuration
  mail:
    host: ${MAIL_HOST}
    port: ${MAIL_PORT}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: ${MAIL_SMTP_AUTH}
          starttls:
            enable: ${MAIL_SMTP_STARTTLS}
          connection-timeout: 5000
          timeout: 5000
          write-timeout: 5000
# Springdoc OpenAPI 설정
# REST Docs로 생성된 OpenAPI 문서를 Swagger UI로 표시
# API 문서 접근 경로:
# - OpenAPI YAML: http://localhost:9000/api-docs/openapi3.yml (REST Docs로 생성)
# - Swagger UI: http://localhost:9000/swagger-ui/index.html
springdoc:
  api-docs:
    enabled: true  # Swagger UI가 작동하려면 활성화 필요
  swagger-ui:
    enabled: true
    url: /api-docs/openapi3.yml  # REST Docs로 생성된 OpenAPI 문서 경로 지정

# JWT Configuration
jwt:
  secret: ${JWT_SECRET}
  access-token-validity-in-seconds: 3600  # 1 hour
  refresh-token-validity-in-seconds: 2592000  # 30 days

# Actuator 설정 (헬스체크 및 메트릭) - 보안 강화 적용
# 관리 포트 분리로 외부 노출 차단
management:
  server:
    port: 9091  # 관리 전용 포트 (외부 노출 안함, 모니터링/헬스체크 전용)
  endpoints:
    web:
      exposure:
        include: 
          - health      # 서비스 헬스체크 (필수)
          - metrics     # 메트릭 수집 (모니터링용)
          - prometheus  # Prometheus 메트릭 (모니터링용)
          # info 엔드포인트 제거 - 버전 정보 노출 방지
          # flyway 엔드포인트 제거 - DB 스키마 정보 노출 방지
          # datasource 엔드포인트 제거 - DB 연결 정보 노출 방지
  endpoint:
    health:
      show-details: never  # 상세 정보 완전 차단 (보안 강화)
      probes:
        enabled: true
      show-components: never  # 컴포넌트 상태 완전 차단 (보안 강화)
  # info 엔드포인트 설정 제거 - 모든 빌드/Git 정보 노출 방지
  health:
    # 데이터베이스 헬스체크 (내부 상태만, 세부 정보는 인증 필요)
    db:
      enabled: true
    # Redis 헬스체크 (내부 상태만, 세부 정보는 인증 필요)
    redis:
      enabled: true
    # 디스크 공간 헬스체크 (내부 상태만, 세부 정보는 인증 필요)
    diskspace:
      enabled: true
    # Mail 헬스체크 (내부 상태만, 세부 정보는 인증 필요)
    mail:
      enabled: true

# 로깅 설정
logging:
  level:
    org.springframework.web: INFO
    org.springframework.security: INFO
    org.springframework.data.jpa: INFO
    org.flywaydb: INFO
    me.helloc.techwikiplus.service.user: DEBUG
  pattern:
    console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr([%-5level]){spring} %clr([%logger{36}]){cyan} - %clr(%msg){faint}%n"

# 서비스 정보
info:
  app:
    name: TechWikiPlus User Service
    description: User management service for TechWikiPlus platform
    version: '@project.version@'
    profiles: ${spring.profiles.active:default}
